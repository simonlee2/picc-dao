{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","App","useWeb3","connectWallet","address","provider","error","console","log","signer","getSigner","undefined","useState","isClaiming","setIsClaiming","hasClaimedNFT","setHasClaimedNFT","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","useEffect","setProviderOrSigner","balanceOf","then","balance","gt","catch","getAllClaimerAddresses","addresess","err","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","className","member","str","substring","length","disabled","onClick","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds","document","getElementById"],"mappings":"6PAMMA,EAAM,IAAIC,IAAY,WAGtBC,EAAmBF,EAAIG,oBAC3B,8CAIIC,EAAcJ,EAAIK,eACtB,8CA+LaC,EA5LH,WAEV,MAAoDC,cAA5CC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,QAAgBC,GAAvC,EAAgCC,MAAhC,EAAuCD,UACvCE,QAAQC,IAAI,YAAaJ,GAIzB,IAAMK,EAASJ,EAAWA,EAASK,iBAAcC,EAIjD,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAGA,EAAoDJ,mBAAS,IAA7D,mBAAOK,EAAP,KAA2BC,EAA3B,KACA,EAA8CN,mBAAS,IAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KAGAC,qBAAU,WAGR1B,EAAI2B,oBAAoBb,KACvB,CAACA,IAEJY,qBAAU,WAER,GAAKjB,EAKL,OAAOP,EACJ0B,UAAUnB,EAAS,KACnBoB,MAAK,SAACC,GAEDA,EAAQC,GAAG,IACbV,GAAiB,GACjBT,QAAQC,IAAI,kDAEZQ,GAAiB,GACjBT,QAAQC,IAAI,6DAGfmB,OAAM,SAACrB,GACNU,GAAiB,GACjBT,QAAQD,MAAM,wBAAyBA,QAE1C,CAACF,IAGJiB,qBAAU,WACHN,GAMLlB,EACG+B,uBAAuB,KACvBJ,MAAK,SAACK,GACLtB,QAAQC,IAAI,iCAAwBqB,GACpCT,EAAmBS,MAEpBF,OAAM,SAACG,GACNvB,QAAQD,MAAM,4BAA6BwB,QAE9C,CAACf,IAGJM,qBAAU,WACHN,GAKLhB,EACGgC,uBACAP,MAAK,SAACQ,GACLzB,QAAQC,IAAI,uBAAcwB,GAC1Bd,EAAsBc,MAEvBL,OAAM,SAACG,GACNvB,QAAQD,MAAM,8BAA+BwB,QAEhD,CAACf,IAGJ,IA0BMkB,EAAaC,mBAAQ,WACzB,OAAOf,EAAgBgB,KAAI,SAAC/B,GAC1B,MAAO,CACLA,UACAgC,YAAaC,IAAOC,MAAMC,YAGxBtB,EAAmBb,IAAY,EAC/B,UAIL,CAACe,EAAiBF,IAGrB,OAAKb,EAaDW,EAEA,sBAAKyB,UAAU,cAAf,UACE,oDACA,kEACA,8BACE,gCACE,6CACA,wBAAOA,UAAU,OAAjB,UACE,gCACE,+BACE,yCACA,mDAGJ,gCACGP,EAAWE,KAAI,SAACM,GACf,OACE,+BACE,8BAnDIC,EAmDgBD,EAAOrC,QAlDtCsC,EAAIC,UAAU,EAAG,GAAK,MAAQD,EAAIC,UAAUD,EAAIE,OAAS,MAmD9C,6BAAKH,EAAOL,gBAFLK,EAAOrC,SAlDX,IAACsC,kBAkEtB,sBAAKF,UAAU,WAAf,UACE,sEACA,wBACEK,SAAUhC,EACViC,QAAS,kBA3FbhC,GAAc,QAEdjB,EACGkD,MAAM,IAAK,GACXpB,OAAM,SAACG,GACNvB,QAAQD,MAAM,kBAAmBwB,GACjChB,GAAc,MAEfkC,SAAQ,WAEPlC,GAAc,GAEdE,GAAiB,GAEjBT,QAAQC,IAAR,wGACyFX,EAAiBO,QAD1G,WA2EF,SAIGS,EAAa,aAAe,4BAnD/B,sBAAK2B,UAAU,UAAf,UACE,qDACA,wBAAQM,QAAS,kBAAM3C,EAAc,aAAaqC,UAAU,WAA5D,qCCrIRS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CACEC,WARa,CACjBC,SAAU,IAQNC,kBAboB,CAAC,GAWvB,SAIE,qBAAKd,UAAU,UAAf,SACE,cAAC,EAAD,UAINe,SAASC,eAAe,W","file":"static/js/main.7c436561.chunk.js","sourcesContent":["import { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { useEffect, useState, useMemo } from \"react\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ethers } from \"ethers\";\n\n// Initiate the SDK on rinkeby\nconst sdk = new ThirdwebSDK('rinkeby');\n\n// We can grab a reference to our ERC-1155 contract.\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0xAe6BF549c202Ebb4B5204977989dF6Db183C7B92\",\n);\n\n// We can grab a reference to our ERC-20 contract.\nconst tokenModule = sdk.getTokenModule(\n  \"0xa95B2B02d28AA4E059b969513a8aF93C75C3fAee\"\n);\n\nconst App = () => {\n  // Use the connectWallet hook thirdWeb gives us.\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"address: \", address);\n\n  // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n  // State\n  // Membership claiming states\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n\n  // Member dashboard states\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  const [memberAddresses, setMemberAddresses] = useState([]);\n\n  // Effects\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    // If they don't have an connected wallet, exit!\n    if (!address) {\n      return;\n    }\n\n    // Check if the user has the NFT by using bundleDropModule.balanceOf\n    return bundleDropModule\n      .balanceOf(address, \"0\") // the pass is our first token so tokenID == 0\n      .then((balance) => {\n        // If balance is greater than 0, they have our NFT!\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"ðŸŒŸ this user has a membership NFT!\")\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"ðŸ˜­ this user doesn't have a membership NFT.\")\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n\n  // This useEffect grabs all our the addresses of our members holding our NFT.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n    bundleDropModule\n      .getAllClaimerAddresses(\"0\")\n      .then((addresess) => {\n        console.log(\"ðŸš€ Members addresses\", addresess)\n        setMemberAddresses(addresess);\n      })\n      .catch((err) => {\n        console.error(\"failed to get member list\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // This useEffect grabs the # of token each member holds.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // Grab all the balances.\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log(\"ðŸ‘œ Amounts\", amounts)\n        setMemberTokenAmounts(amounts);\n      })\n      .catch((err) => {\n        console.error(\"failed to get token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // Actions\n  const mintNft = () => {\n    setIsClaiming(true);\n    // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n    bundleDropModule\n      .claim(\"0\", 1) // \"0\" for tokenID 0. Claim just one of it.\n      .catch((err) => {\n        console.error(\"failed to claim\", err);\n        setIsClaiming(false);\n      })\n      .finally(() => {\n        // Stop loading state.\n        setIsClaiming(false);\n        // Set claim state.\n        setHasClaimedNFT(true);\n        // Show user their fancy new NFT!\n        console.log(\n          `ðŸŒŠ Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n        );\n      });\n  }\n\n  // A fancy function to shorten someones wallet address, no need to show the whole thing. \n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  };\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          // If the address isn't in memberTokenAmounts, it means they don't\n          // hold any of our token.\n          memberTokenAmounts[address] || 0,\n          18,\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  // If user hasn't connected the wallet\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to Picc DAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn=hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n\n  // If the user has already claimed their NFT we want to display the interal DAO page to them\n  // only DAO members will see this. Render all the members + token amounts.\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>PicDAO Member Page</h1>\n        <p>Congratulations on being a member</p>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free PicDAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nimport { ThirdwebWeb3Provider } from '@3rdweb/hooks';\n\n// Supported chains\n// 4 = Rinkeby\nconst supportedChainIds = [4];\n\n// Supported wallets\n// In this case we support Metamask which is an \"injected wallet\"\nconst connectors = {\n  injected: {}\n};\n\n// Render the App component to the DOM\nReactDOM.render(\n  <React.StrictMode>\n    <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}\n    >\n      <div className=\"landing\">\n        <App />\n      </div>\n    </ThirdwebWeb3Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}